import axios, { AxiosInstance } from "axios";

const axiosInstance: AxiosInstance = axios.create({
  baseURL: "https://679b419e33d31684632334e9.mockapi.io/api/metcalc/",
});


interface CacheEntry<T> {
  data: T;
  timestamp: number;
}

const memoryCache: Record<string, CacheEntry<unknown>> = {};
const TTL = 3600000;

// –ó–∞–ø—Ä–æ—Å: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
axiosInstance.interceptors.request.use((config) => {
  if (config.method === "get" && config.url) {
    // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –≤ –ø–∞–º—è—Ç–∏
    const cachedMemory = memoryCache[config.url];
    if (cachedMemory && Date.now() - cachedMemory.timestamp < TTL) {
      console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à (RAM) –¥–ª—è ${config.url}`);
      return Promise.reject({ data: cachedMemory.data, fromCache: true });
    }

    // 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –≤ `localStorage`
    const cachedLocal = localStorage.getItem(config.url);
    if (cachedLocal) {
      try {
        const { data, timestamp } = JSON.parse(cachedLocal);
        if (Date.now() - timestamp < TTL) {
          console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à (localStorage) –¥–ª—è ${config.url}`);
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å (RAM) –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
          memoryCache[config.url] = { data, timestamp };
          return Promise.reject({ data, fromCache: true });
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–µ—à–∞ –∏–∑ localStorage:", error);
      }
    }
  }
  return config;
});

// –û—Ç–≤–µ—Ç: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
axiosInstance.interceptors.response.use(
  (response) => {
    if (response.config.method === "get" && response.config.url) {
      console.log(`üíæ –ö–µ—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${response.config.url}`);

      // 1Ô∏è‚É£ –ö–µ—à–∏—Ä—É–µ–º –≤ –ø–∞–º—è—Ç—å (RAM)
      memoryCache[response.config.url] = {
        data: response.data,
        timestamp: Date.now(),
      };

      // 2Ô∏è‚É£ –ö–µ—à–∏—Ä—É–µ–º –≤ `localStorage`
      localStorage.setItem(
        response.config.url,
        JSON.stringify({ data: response.data, timestamp: Date.now() })
      );
    }
    return response;
  },
  (error) => {
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –≤ –∫–µ—à–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
    if (error.fromCache) {
      return Promise.resolve({ data: error.data });
    }
    return Promise.reject(error);
  }
);

export default axiosInstance;